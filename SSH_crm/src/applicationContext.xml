<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">



    <!--Spring主配置文件-->


    <!--指定Spring读取db.properties配置-->
    <context:property-placeholder location="classpath:db.properties"/>
    <!--配置c3p0连接池-->
    <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--
        注意:以前我们通过hibernate获取到的连接,在管理上来讲,连接是自动提交的,
        但现在我们通过c3p0连接池中获得的连接是不会自动提交的,需要我们在配置相关的事务管理,
        在事务提交之后,连接才会提交
    -->




    <!--核心事务管理器-->
    <bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!--&lt;!&ndash;配置事务通知&ndash;&gt;
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            &lt;!&ndash;以方法为单位,指定方法应用什么事务属性
                    isolation:隔离级别
                    propagation:传播行为
                    read-only:是否只读
             &ndash;&gt;
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>

            <tx:method name="transfer" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>-->
    <!--&lt;!&ndash;配置将通知织入目标对象&ndash;&gt;
    <aop:config>
        &lt;!&ndash;配置切点表达式&ndash;&gt;
        <aop:pointcut id="txPc" expression="execution(* com.itheima.service.impl.*ServiceImpl.*(..))"/>
        &lt;!&ndash;配置切面: 通知+切点
               advice-ref:通知的名称
               pointcut-ref:切点的名称
        &ndash;&gt;
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
    </aop:config>-->




    <!--开启注解事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>




    <!--将SessionFactory配置到Spring容器中-->
    <!--加载配置方案1：仍然使用外部的hibernate.cfg.xml配置信息-->
    <!--<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="configLocation" value="classphibernate.cfg.xml.bak.xml"></property>
    </bean>-->
    <!--加载配置方案2：在Spring配置中放置hibernate配置信息-->
    <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!--将连接池注入给SessionFactory,结果:hibernate会通过连接池获得连接,而不会再通过外部的hibernate.cfg.xml配置文件或者Spring中放置hibernate配置信息来获得连接,所以我们就需要将在Spring中放置hibernate的配置信息去除掉,以免重复-->
        <property name="dataSource" ref="dataSource"></property>
        <!--配置hibernate基本信息-->
        <property name="hibernateProperties">
            <props>
                <!--必选配置-->
                <!--<prop key="hibernate.connection.username">root</prop>
                <prop key="hibernate.connection.password">123456</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                <prop key="hibernate.connection.url">jdbc:mysql:///crm_32?useUnicode=true&amp;characterEncoding=UTF8</prop>-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>

                <!--可选配置-->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!--引入ORM元数据,指定orm元数据所在的包路径(相对于src路径下),Spring会自动读取包中的所有的配置-->
        <property name="mappingDirectoryLocations" value="classpath:com/itheima/domain"></property>
    </bean>



    <!--Action-->
    <!--注意:Action对象的作用范围一定是多例,这样才符合struts2架构-->
    <bean name="userAction" class="com.itheima.web.action.UserAction" scope="prototype">
        <property name="userService" ref="userService"></property>
    </bean>
    <!--service-->
    <bean name="userService" class="com.itheima.service.impl.UserServiceImpl">
        <property name="ud" ref="userDao"></property>
    </bean>
    <!--dao-->
    <bean name="userDao" class="com.itheima.dao.impl.UserDaoImpl">
        <!--注入sessionFactory-->
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>


</beans>